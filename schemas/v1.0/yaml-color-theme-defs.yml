# yaml-language-server: $schema=https://json-schema.org/draft-07/schema

type: object

properties:
  color:
    anyOf:
      - $ref: "#/$defs/colorHex"
      - $ref: "#/$defs/alphaTag"

  nullableColor:
    anyOf:
      - $ref: "#/properties/color"
      # empty keys are removed in the yaml-json conversion
      - type: "null"

$defs:
  # single allowed type for color properties in color-theme.json (v0)
  colorHex:
    type: string
    # custom format, vscode built-in
    # https://github.com/Microsoft/vscode/blob/main/extensions/json-language-features/server/README.md#server-capabilities
    format: color-hex

  # !alpha custom tag
  alphaTag:
    anyOf:
      # the "!alpha" token is stripped by the yaml parser
      - $ref: "#/$defs/longAlphaArray"
      - $ref: "#/$defs/shortAlphaArray"

  # [#rrggbb, aa]
  longAlphaArray:
    type: array
    minItems: 2
    maxItems: 2
    items:
      - $ref: "#/$defs/longHexRgb"
      - $ref: "#/$defs/longHexAlpha"

  longHexRgb:
    type: string
    pattern: "^#[0-9a-fA-F]{6}$"

  longHexAlpha:
    anyOf:
      - type: string
        pattern: '^[0-9a-fA-F]{2}$'
      - type: integer
        # Why are values 0-9 disallowed?
        # The YAML-JSON conversion concatenates Rgb and Alpha (as string).
        # If Alpha is single digit, the result would be an invalid "#rrggbba"
        # To represent single-digit values, surround them by quotes: "00"
        minimum: 10
        maximum: 99

  # [#rgb, a]
  shortAlphaArray:
    type: array
    minItems: 2
    maxItems: 2
    items:
      - $ref: "#/$defs/shortHexRgb"
      - $ref: "#/$defs/shortHexAlpha"

  shortHexRgb:
    type: string
    pattern: "^#[0-9a-fA-F]{3}$"

  shortHexAlpha:
    anyOf:
      - type: string
        pattern: '^[0-9a-fA-F]$'
      - type: integer
        minimum: 0
        maximum: 9
